# import pybullet as p
# import pybullet_data
# import time
# import math 

# # Initialize the PyBullet physics simulation
# p.connect(p.GUI)
# p.setAdditionalSearchPath(pybullet_data.getDataPath())

# # Set the gravity
# p.setGravity(0, 0, -9.81)  # Earth's gravity (9.81 m/s^2 in the downward direction)

# # Create a box
# box_start_pos = [0, 0, 0.5]  # Initial position of the box (x, y, z)
# box_half_extents = [0.5, 0.5, 0.5]  # Half-extents of the box (x, y, z)
# objectId = p.createCollisionShape(p.GEOM_BOX, halfExtents=box_half_extents)
# box_id = p.createMultiBody( 1, 
#                             objectId, 
#                             -1, 
#                             box_start_pos)
# # box_id = p.createBox(
# #     halfExtents=box_half_extents,
# #     basePosition=box_start_pos,
# #     baseMass=1.0,
# #     collisionShapeType=p.GEOM_BOX
# # )

# # Set the initial velocity of the box (upward)
# initial_velocity = [-1, 0, 0.0]  # 2.0 m/s upward velocity
# p.resetBaseVelocity(box_id, linearVelocity=initial_velocity)
# # p.resetBasePositionAndOrientation(box_id, [0, 0, 0], p.getQuaternionFromEuler([0, -2, 0]))

# # Simulation loop
# for _ in range(10000):
#     p.applyExternalTorque(box_id, -1, 
#                         [0, -4, 0], # gravity compensated 
#                         # [0, 0, 0], 
#                         p.LINK_FRAME)
#     pos_object, ori = p.getBasePositionAndOrientation(box_id)

#     euler = p.getEulerFromQuaternion(ori)
#     print("euler", euler)
#     if euler[0] > -0.8 and euler[0] < 0.8:
#         y = euler[1]
#     elif (euler[0] > 3 or euler[0] < -3) and euler[1] > 0:
#         y = math.pi - euler[1]
#     elif (euler[0] > 3 or euler[0] < -3) and euler[1] < 0:
#         y = -math.pi - euler[1]
#     print("y", y)
#     ori_new = p.getQuaternionFromEuler([0, y, 0])
#     # p.resetBasePositionAndOrientation(box_id, pos_object, ori_new)

#     print('!!!!', p.getEulerFromQuaternion(ori_new))
#     print(box_id)
#     p.stepSimulation()
#     time.sleep(20/240)

# # Close the PyBullet simulation
# p.disconnect()


####################################
# import pybullet as p
# import time
# import pybullet_data
# physicsClient = p.connect(p.GUI)#or p.DIRECT for non-graphical version
# p.setAdditionalSearchPath(pybullet_data.getDataPath()) #optionally
# p.setGravity(0,0,-10)
# planeId = p.loadURDF("plane.urdf", basePosition=[0,0,-1], baseOrientation=[0,0,0,1])
# startPos = [0,0,1]
# startOrientation = p.getQuaternionFromEuler([0,0,0])
# boxId = p.loadURDF("asset/4face-bottle.urdf", startPos, startOrientation)
# #set the center of mass frame (loadURDF sets base link frame)
# # startPos/Ornp.resetBasePositionAndOrientation(boxId, startPos,
# # startOrientation)
# # for i in range (10000):
# #     p.stepSimulation()
# #     time.sleep(1./240.)
# objectId = p.createCollisionShape(p.GEOM_BOX, halfExtents=[.2, .6, .1])
# objectUid = p.createMultiBody(1, 
#                             objectId, 
#                             -1, 
#                             [0,0,4],)
#                             # self.quat_object
# force_on_object = [0,0,1]
# torque_on_object = [0,0,1]
# pos_object,quat_object = p.getBasePositionAndOrientation(objectUid)
# for i in range(int(2400)):
#     # Apply external force on object
#     p.applyExternalForce(objectUid, -1, 
#                         force_on_object, # gravity compensated 
#                         pos_object,
#                         p.WORLD_FRAME)
#     # p.applyExternalTorque(objectUid, -1, 
#     #                     torque_on_object,
#     #                     p.WORLD_FRAME)
#     p.stepSimulation()
#     pos_object,quat_object = p.getBasePositionAndOrientation(objectUid)
#     eul_object = p.getEulerFromQuaternion(quat_object) # rad
#     print(pos_object)
#     time.sleep(2./240.)
# p.disconnect()


####################### VHACD

# import pybullet as p
# import pybullet_data as pd
# import os
# p.connect(p.DIRECT)
# name_in = os.path.join(pd.getDataPath(), "/home/yif/Documents/KTH/research/dynamicCaging/cad/bottle/5face-bottle.obj")
# name_out = "5face-bottle-vhacd.obj"
# name_log = "log.txt"
# p.vhacd(name_in, name_out, name_log)


####################### forward sim of calculated escape path
# Test
from pomp.example_problems.waterswing import *

data = [5.075564026547951,5.5992976116878586,-3.060835464054543,-2.360689477367334,0.06955223511320385,-1.695494171430703,4.992156914835413,5.256617217602105,-3.055024027570622,-1.7833756144066215,-0.08638963617556678,-1.695188429515376]
gipper_vel = data[-3:]
# mass_object = .1
# mass_gripper = 10
# moment_gripper = 1 # moment of inertia
# half_extents_gripper = [.7, .4] # movement on x-z plane
# radius_object = 0.01
# params = [mass_object, mass_gripper, moment_gripper, half_extents_gripper, radius_object]
dynamics_sim = forwardSimulationWaterSwing(gui=1)
cage = WaterSwing(data, dynamics_sim)
cage.controlSpace()

# From high to low
# data = [1.02, 5.11, 0.00, 0,
#             1.01, 4.70, -0.00, 0.00, 1, -0.50]
# gipper_vel = data[-3:]
time.sleep(2.5)

# energy labeler
states = [[5.075564026547951, 5.5992976116878586, -3.060835464054543, -2.360689477367334, 0.06955223511320385, -1.695494171430703, 4.992156914835413, 5.256617217602105, -3.055024027570622], [4.856979878456112, 5.600582724824396, 3.0734877195060637, -2.3841641258846793, -0.0364468329512131, -1.677979707124368, 4.828702796768799, 5.248859498724536, 3.0727413504162127], [4.641787333680097, 5.565330796121244, 2.904258068774004, -2.352983740617352, -0.3767161771249846, -1.6653501549429428, 4.66125171913594, 5.2144594235250885, 2.91045385287247], [4.4088641226441645, 5.492132965700616, 2.7581208325205857, -2.6974536711555395, -1.006842995540986, -1.645915419729072, 4.508413527499794, 5.155997071891726, 2.7550484353324256], [4.3366284940221576, 5.454309168496893, 2.707277640381722, -2.408745725688429, -1.381453719537256, -1.7433958762638382, 4.463241025305176, 5.130079005996799, 2.7055913950564707], [4.131588059487028, 5.332722270810715, 2.5416838726670044, -1.885877408902837, -1.2078849432733207, -1.730194129773849, 4.319236131758594, 5.03765434100733, 2.5431210682256458], [4.043543248608568, 5.258114686040923, 2.44879080867427, -1.7284671157191598, -1.492198859822703, -1.693085605030719, 4.252875496317353, 4.9780091366561345, 2.458414670910162], [3.9154882815989858, 5.105352235875226, 2.3015679636536572, -1.1229768845933945, -1.7577415754967416, -1.5938114359637865, 4.14098128551112, 4.8585869840304365, 2.303031986024336], [3.841074280315518, 4.965937527286547, 2.1631490282941406, -1.1080179050986596, -2.0485545475262184, -1.7016277339856787, 4.061526010727127, 4.741739784623945, 2.1689139776452007], [3.739932806951866, 4.813126505559308, 2.029893764484072, -1.434920383779272, -1.8797012645785378, -1.701931653142538, 3.998395109963661, 4.615333463729387, 2.034785204203908], [3.633330561749229, 4.625307221434407, 1.892661724659252, -0.8712617370602388, -2.440284435377742, -1.5374668253248356, 3.947832484739243, 4.467522888506819, 1.8864247191108343], [3.5838467774111473, 4.398157374723483, 1.7427508479356733, -0.4915696761765551, -2.9745500177826245, -1.7410407775739734, 3.9210263672407426, 4.32115997581774, 1.7451481760488168], [3.5619468536044923, 4.135853919461456, 1.5812430571377798, -0.043348057480653776, -2.7534406025796447, -1.7063246929211124, 3.9144179557633803, 4.157597344765825, 1.5896952549685763], [3.582139758886179, 3.964873408133025, 1.4607721887470406, 0.31056230126864015, -2.2204868967758165, -1.713272337915741, 3.9288651177383445, 4.031938958701758, 1.4695860057180954], [3.6098951594413675, 3.8483592020242163, 1.3765173123060628, 0.5976280532533768, -2.3925718658935273, -1.699322520847742, 3.9496912827907042, 3.945148846447563, 1.3848527954683885], [3.6762879482613626, 3.6761169582977082, 1.2578206926273934, 1.129463904700392, -2.5156709665600014, -1.6445554797493627, 3.9895408954728553, 3.825115362991336, 1.2647668881909089], [3.7756661966090728, 3.5003180399261797, 1.1331551118992607, 1.2683393917258323, -1.8443310514010771, -1.6044458334201643, 4.053074374724019, 3.690483941180652, 1.1233584497751818], [3.853898337043493, 3.362677891439674, 0.9776096155277738, 0.5488693355999897, -1.162193380612074, -2.250067734887042, 4.14308927773388, 3.55379547201235, 0.9679848403949446], [3.981361020588262, 3.258270001389961, 0.8123388834108723, 2.033295638048928, -1.4768509994132981, -1.5396962357903408, 4.252984493824819, 3.4327218991203194, 0.8127489308771333], [4.13440603356767, 3.0813270324993254, 0.6824368643755283, 2.1076525810119566, -1.8156240760679918, -1.9308640566492623, 4.363141092211933, 3.3444435651935986, 0.678954417166363], [4.327540238393884, 2.9544186828521264, 0.5087472468741187, 1.8613002751470153, -1.1179943853261967, -1.691501106166881, 4.509428427965112, 3.2556772473192748, 0.5164257770033396], [4.465316405674421, 2.894015004710914, 0.4090329987536795, 2.598003979180375, -1.0851974808993339, -1.6793603385275129, 4.606016759493445, 3.2168174285257902, 0.4175775221538494], [4.702757947084521, 2.822680468051011, 0.2535314383232258, 2.534670828539709, -0.6638789255414206, -1.7049133278548185, 4.763156904758211, 3.170930412760122, 0.262093892643196], [4.94507317658797, 2.8071768273888313, 0.1115589111873499, 2.3857590480861646, 0.03171957266292867, -1.717416106816079, 4.925540052178842, 3.150044784394367, 0.10658956951662366], [5.117536058452094, 2.822156503318351, -0.02838739750562875, 1.7834648276734626, 0.3136939316939905, -1.6449201020535356, 5.074269026371134, 3.154267271517296, -0.034676132942990996], [5.215697749547066, 2.8251938050385776, -0.12372805954248775, 1.8549779557116723, -0.009905461066040455, -2.7907657487977087, 5.169592783590861, 3.1705905026620482, -0.12648796062508005], [5.360833644881334, 2.8768593028906375, -0.3342743769364043, 1.779641424218213, 0.7828031556182744, -2.726521382717633, 5.306022229964911, 3.2068143784798226, -0.2604554503411284], [5.553114867320968, 2.9498106584840285, -0.4875435859499069, 2.3882908564515306, 0.7864183128768588, -1.1692505430572102, 5.450071816942102, 3.2668110739630913, -0.4086644686726481], [5.793897611504881, 3.0676545360522542, -0.5693497672756008, 2.493844052890545, 1.5770854013964752, -1.464383089065344, 5.596509006691615, 3.355222782549847, -0.5711099182162698], [5.899077103008848, 3.1499329839772217, -0.6543395961207045, 2.2318891459403596, 1.8803652312855037, -1.7356870072069466, 5.658823467601012, 3.4082792048990416, -0.6488015147615854], [6.059163777652746, 3.324929334420943, -0.7949012248027838, 1.4138760810832804, 1.8221247443887594, -1.5818054612881753, 5.77487751522778, 3.5238040829210475, -0.8043470184411698], [6.168970494031765, 3.477962275437605, -0.9817172354241228, 1.0267548440808243, 1.810587148292836, -2.222455050010161, 5.8670801238527215, 3.649831240216151, -0.9524863937518288], [6.229017003760559, 3.613220954881745, -1.1086375415607845, 0.7552737261668576, 1.9215366781842556, -1.7648822584288182, 5.925882612648071, 3.7617837785035673, -1.072580280247612], [6.275206397312507, 3.7303415455372373, -1.2272266281773376, 0.6377531183783618, 1.6114607848160412, -1.7911486882066632, 5.96817533036867, 3.873048030675396, -1.1855928422153037], [6.301826523004694, 3.8556665535276746, -1.3483612320492537, 0.38862554000412103, 2.177771827785035, -1.4035339498054185, 5.995837267603557, 3.980969656524725, -1.2912734651239641], [6.062065758471485, 4.200434146524784, -1.4479469174634523, -2.55335769964905, 2.008557044558077, -1.8499036345971356, 6.021824213170288, 4.149444801018851, -1.453406544363226], [5.847449910672545, 4.337548894709638, -1.5843427202917808, -3.1223896703667644, 1.6045047952831888, -1.4053628107472813, 6.019468963230325, 4.283337817198306, -1.5805497397759636], [5.6699326482720425, 4.4053493828926875, -1.6677192362508255, -3.394557940706152, 0.92294975367997, -1.7004270961614358, 6.005495040560791, 4.379127917402887, -1.672275196473557], [5.438524621876105, 4.440438159053534, -1.7807288326254087, -3.5262983260777045, 0.18192424149944503, -1.7456389257554688, 5.977560648839106, 4.494974986597903, -1.7850571023656996], [5.2453685061915, 4.435310452600469, -1.8838941585469955, -2.729747691162786, -0.25292448048787947, -1.5082968042865375, 5.939324730225263, 4.599929392879866, -1.8907332219703992], [4.990548465790628, 4.398364987961247, -1.9255991561199377, -2.6961310685528086, -0.3424505735307726, 0.4085790872437013, 5.864010307017158, 4.753838269526328, -2.0525297658460744], [4.820736738157513, 4.3913538507975325, -1.8568186011297756, -2.1558241975507735, 0.15056456454124018, 1.307764402672897, 5.790844399649394, 4.857043636502606, -2.172489389134396], [4.643454362897968, 4.3646022408919585, -1.7391577323501317, -1.913782032401877, -0.710939168944051, 1.31278171325469, 5.68588408502908, 4.972768607713858, -2.320800885555859], [4.523532488272018, 4.288825779609581, -1.6321264666259907, -1.1557211618611263, -1.178789818727423, 1.3872468354501468, 5.5764936825942275, 5.0622862520286125, -2.4550033028924925], [4.435301667886092, 4.171451425718056, -1.519347807248574, -0.9710519861848843, -1.6163182529576796, 1.322669839409896, 5.44977340964355, 5.140261309483566, -2.5962690053521067], [4.4048590085482315, 4.120549424078248, -1.480625659577258, -1.098270570632962, -1.841881408670193, 1.3313264807216352, 5.402020613391269, 5.161036107976161, -2.6457120012129716], [4.285529443160575, 3.9470976404851745, -1.353414214838439, -1.379843284672912, -1.7806443805804433, 1.3238462874482346, 5.241936705077013, 5.221458195786049, -2.8081675590415283], [4.163523582468519, 3.7560929732385095, -1.2309296833427323, -1.175260869557627, -2.1878359960678773, 1.2361648664199092, 5.074187822459509, 5.255192433246777, -2.970623116870085], [4.064950133733975, 3.506527944296685, -1.1093644729566505, -0.8941465109297388, -2.985784249107602, 1.2981530801700467, 4.903191433638157, 5.261350469178205, -3.1330786746986417], [4.026162913593464, 3.346591588410892, -1.0448344748335847, -0.6755580036321207, -3.37890954499976, 1.2842088628616315, 4.814630960057053, 5.250091166476129, 3.065347211005176], [3.986178159692778, 3.045737967123591, -0.9294224904941495, -0.2582509908948425, -3.4923430599049774, 1.3506170557134651, 4.661874583582432, 5.217337759520148, 2.9170182234225805], [3.9870960889270575, 2.7225396527413324, -0.7953486173452327, 0.255088659672522, -3.262651816065657, 1.4434118285743232, 4.501708566866337, 5.157133660940582, 2.7545626655940234], [4.043722348749588, 2.447451780002163, -0.6738126723836131, 1.063520008620791, -3.335799733788277, 1.472020420888824, 4.372735002332614, 5.082945004036292, 2.6132969631344087], [4.097128566484588, 2.2954414920337323, -0.6052155984662719, 1.2499820355493305, -3.300578407246998, 1.5171992726196355, 4.308251179027062, 5.032560254127796, 2.5356008267816206], [4.199235709479675, 1.9770183632813423, -0.47021099508952274, 1.091444905757046, -3.946887893463957, 1.566282916747586, 4.192983088067135, 4.92710617204779, 2.387271839199025], [4.257505846521356, 1.7930533134339826, -0.39194418355314836, 1.2279824474368155, -3.452881315279169, 1.5645351887104817, 4.1367443586047665, 4.8577741110175126, 2.302512417723256], [4.319061856426334, 1.6092329557880134, -0.31483390464956584, 1.2337752178910968, -3.8655444001534223, 1.5233112921464866, 4.086577033801519, 4.783929890523751, 2.2177529962474867], [4.3871625041822, 1.3726048287575927, -0.22687885819679057, 1.1099488726820934, -4.221961584840496, 1.494358366628513, 4.035552020370244, 4.693132670226985, 2.1188670045257556], [4.51042579142752, 0.9685891954573563, -0.08824675641825716, 1.4478126116144685, -4.21018121323427, 1.402813532827866, 3.966861211728535, 4.536418729543247, 1.9564114466971985], [4.6154841788531025, 0.7016722346469465, -0.0019033643416630148, 1.8849155876047952, -4.323600262732312, 1.3628399210734423, 3.9391835053141575, 4.428313934454639, 1.850462169852486], [4.788839470835145, 0.34343044627635816, 0.12373606622170191, 1.8968396874643607, -3.5287153435001697, 1.3777081881683853, 3.915584400831924, 4.2663564454848135, 1.6950698971469083]]
inputs = [[0.0926927776513542, 0.5027754798430522, 6.187039711663118, -2.7293980208435245], [0.09663392445176387, 7.540040840107459, 3.1665553926352157, -1.7666160960026733], [0.0927667959982688, -4.708053559588867, -2.947005479633564, 2.580304280113955], [0.0331505098695572, 5.370827464592017, -6.687675227163446, -1.8926505204132196], [0.0979126307532806, 3.7344339104289404, 4.3624256532769845, 2.5601735868163704], [0.05182951974045963, -1.5671022878721566, 6.818333068013697, -2.040770009525784], [0.09397149439433729, 6.215652894647942, -1.9917631489044396, 2.6949289494394817], [0.0828778025107475, 6.639261460671907, 1.832869567946254, -1.7530732261432984], [0.080312070104038, -2.918925691821988, 6.0054839108491755, 1.2722214943110712], [0.08982865568334829, 0.5713140752098855, -3.937296244271449, 0.4757027589469933], [0.08396071665105574, 2.3654770227380233, -6.273433153351675, 2.4588533934926655], [0.0933473635489982, -2.237103628667616, 1.3701951782895332, 0.1711750201326021], [0.07203158770823291, -6.284084261172149, 6.131798642944425, 2.778414523729997], [0.05285740911331012, -0.30141521567512974, -3.338353474181077, 1.0290561852962856], [0.07117011544648502, 5.764618346660992, -2.5204728302786705, 2.8042597735567973], [0.08626082886690477, 2.735135304627864, 5.004341449018625, 0.1571259426934466], [0.09329497633437284, -9.053919339570042, 7.0147304004380615, 1.6913007396134283], [0.0955327414477593, 8.645279055060122, 2.042015652486155, 1.0325783784602391], [0.08197601611668397, 0.6150961730945639, 3.4249190998160444, -1.7274698644555384], [0.09913976717306969, -6.912186656622399, 1.052420852261779, 0.8873820825369076], [0.05985984311684565, 7.470202079717293, -6.91532022972678, -0.9422600322919457], [0.09448129480917702, -1.7692757614903627, -4.834579721762919, -2.9295911251059197], [0.09182775942538231, 3.9091939395178006, 4.135814260602297, -0.2932177612388749], [0.08563021608013305, -7.227530644952445, 3.3836923083727406, 2.609856171451608], [0.05462255049185688, 0.9052711860816949, -9.511920777342738, 0.40982622847038774], [0.08013977035383, -7.555951897855541, -3.123749091026909, -0.684070540381704], [0.08855637285340219, 2.9876822160058687, -8.012370251233072, 0.8299880532161854], [0.09767804647122004, 2.398669539909239, 4.947984118817848, 1.1786122620635267], [0.0477212750402536, 0.11285767040319428, 1.368365275742832, 0.8101981595417276], [0.09354910625783336, -3.956545343149136, -0.20283939104396254, 1.8705876718301564], [0.08861929695097831, -4.706558419591742, -5.265666269742373, 1.1692361827272624], [0.07248137610666801, -2.745683677361983, 0.3291662596037739, 2.0080211107409704], [0.06986431264399214, -1.7628091168274338, -4.651138400523207, -1.1819893400029993], [0.06495802806745068, -3.596573247479795, -6.8649270757479375, 0.6256224976666704], [0.09680786831865629, -1.9056402786832827, -6.980957150867056, -2.164610692466672], [0.07678514232795115, -7.845004915422733, -4.306971764665015, -2.2390619790310473], [0.057529718178858026, -8.587269901353018, -0.9052851921592087, 0.4933898682468638], [0.06871135902086338, -6.469742901860032, -0.36116597760989144, 1.521563026491405], [0.0646118985848754, 8.104159695903064, 1.5773427945398115, 0.7336438742029143], [0.0998329877095926, -4.143639822817589, 5.825202283968283, -2.30230499638015], [0.07277924843882552, 6.346586648256444, 8.916323983385691, 2.6562701681936858], [0.09042726724844423, 2.6952541506874823, -9.724955623414012, -2.2985276341157803], [0.08002079321254647, 9.575505733146308, -5.909692418316275, 2.821836209512072], [0.08599097572246255, 2.2160301081149143, -5.250341210763092, -2.3247718574490532], [0.029938465917245527, -4.361780038219816, -7.733593910143295, 0.8903973920645423], [0.09791634311064601, -2.9381500595473025, 0.6389950757191016, -0.234162572036948], [0.09630391424990797, 2.1347730272899152, -4.248955987694954, -2.7448097017563184], [0.09787210082437431, 2.9333672204649286, -8.326416553457982, 1.9405006043521134], [0.05108015838051673, 4.371770145952356, -7.862505917843212, -0.8366530385048825], [0.08936139284401985, 4.769223002711749, -1.2963830274881705, 2.27685232634866], [0.09818219814032261, 5.356587658094238, 2.396778196584197, 2.9048798460790675], [0.08461361576525335, 9.701176187379229, -0.8777750126714086, 1.0299093233221015], [0.04684603144077987, 4.068262405713593, 0.7684653063551323, 2.957161204198525], [0.09001940347458542, -1.8118529119118278, -7.386394128193863, 1.6828677986726657], [0.05199795638416305, 2.7307508335954083, 9.880131563695741, -0.10486368222625497], [0.05171812350290388, 0.11585540908564163, -8.253261697485021, -2.4734337938397646], [0.0585769256242335, -2.122737346440047, -6.1100088803498664, -1.4890075980672093], [0.0997542301329966, 3.5255346671204215, 0.12292561676052216, -2.865751318976776], [0.06419994098677478, 6.993647615845244, -1.8147047919687616, -1.9187333642123134], [0.09374712724051151, 0.13008108937709473, 8.67147184616887, 0.48659783219820785]]

# states = [[4.316823965701437, 5.460139303451004, 2.625445829083096, -3.5258993444553637, -2.09344701820186, -2.772054131286835, 4.4528401414474805, 5.136296693792287, 2.628733887768435], [3.790645939774659, 5.03567541930165, 2.179020533944699, -2.809502484719083, -2.974546127989472, -2.6183507532412698, 4.056881316032324, 4.870490910418871, 2.1648920895217345], [3.378278021329076, 4.615074646656777, 1.7116855746948587, -1.9243488134976148, -1.8588832470225136, -2.7201953385356017, 3.641127560779203, 4.59139165558177, 1.677867841739299], [3.142053390479113, 4.2871424501701725, 1.3082959491721793, -1.244205792853133, -2.4958524504805912, -2.6600049568145963, 3.284767199133673, 4.352163722864255, 1.2604184864972112], [2.781469488294317, 3.9425120604040886, 0.7740641818857749, -2.778445423961699, -1.7883400297988388, -2.929603069987379, 2.879133247788139, 4.079358685520745, 0.7848272715347827], [2.285290770623816, 3.5062295348042136, 0.23543151207965748, -1.8522876703695257, -2.699339047304674, -2.735818721669528, 2.4132348584000756, 3.7672884755765113, 0.24044971420932904], [2.1034988557291925, 3.2344303437785236, -0.08900261291059901, -1.3829457057688372, -1.9869857485567148, -2.78517490707777, 2.135954444028005, 3.581213357832584, -0.08409048071288655]]
# inputs = [[0.1674855279158624, 4.27773133343489, -5.26477320730277, 2.2227116246757133], [0.1762593068150075, 5.058020978408413, 6.375216462668337, -1.7459071764742091], [0.15114675275707065, 4.534286804296531, -4.246461356387208, 1.2038076344201967], [0.17173327657110607, -6.947529007359607, 0.7722702887455171, -1.1858727471250785], [0.19594865003607143, -4.192053508198339, -1.78910321339057, -2.748143423183466], [0.11829106008435997, 1.7109005533365895, 5.864152053184208, -1.428867797581943]]
print(len(states), len(inputs))
# dynamics_sim.reset_states(states[0]+gipper_vel)
for i in range(len(inputs)):
    dynamics_sim.reset_states(states[i]+gipper_vel)
    new_states, viapoints = dynamics_sim.run_forward_sim(inputs[i])
    print('new_states', new_states)

# # ball balance
# states = [[1.02, 5.11, 1.01, 4.7, -0.0], [4.304206592094783, 5.195005075715069, 1.0126748209851473, 4.754665910584282, -0.3832874049208745], [4.589857682473735, 1.4220963753814768, 1.0126748209851473, 5.1671659105842584, -0.58691567122751]]
# inputs = [[0.4341884048103374, 7.5790919267402685, -8.60582670121947], [0.41600639801144806, 0.6924874918276647, -9.146445334142033]]
# for i in range(len(inputs)):
#     state = states[i][:2]+inputs[i][1:]+states[i][2:]+gipper_vel
#     sim.reset_states(state)
#     new_states = sim.run_forward_sim_ball_balance(inputs[i][0])
#     print('new_states', new_states)

dynamics_sim.finish_sim()

####################### IRC
# import numpy as np

# def rotate_point_around_another_point(point, center, angle):
#     """
#     Rotate a point around another point by a given angle.

#     Parameters:
#     point: The point to rotate (x, y).
#     center: The center of rotation (x, y).
#     angle: The rotation angle in radians.
    
#     Returns:
#     The rotated point (x, y).
#     """
#     # Translate point back to origin
#     temp_point = [point[0] - center[0], point[1] - center[1]]

#     # Rotate point
#     rotated_temp_point = [temp_point[0] * np.cos(angle) - temp_point[1] * np.sin(angle),
#                           temp_point[0] * np.sin(angle) + temp_point[1] * np.cos(angle)]

#     # Translate point back to the original location
#     rotated_point = [rotated_temp_point[0] + center[0], rotated_temp_point[1] + center[1]]
    
#     return rotated_point

# def find_new_position(x, y, vx, vy, omega, theta1, theta2):
#     """
#     Find the new position of the object after time T.

#     Parameters:
#     x, y: Initial position of the object.
#     vx, vy: Initial velocity components.
#     omega: Angular velocity.
#     T: Time duration.
    
#     Returns:
#     New position (x, y) of the object.
#     """
#     # Angular displacement
#     angular_displacement = theta2 - theta1

#     # Correct for wrapping
#     if angular_displacement > np.pi:
#         angular_displacement -= 2 * np.pi
#     elif angular_displacement < -np.pi:
#         angular_displacement += 2 * np.pi

#     # Time duration for the change in orientation
#     T = angular_displacement / omega if omega != 0 else 0

#     # Calculate the radius (distance to ICR)
#     R = np.sqrt(vx**2 + vy**2) / np.abs(omega) if omega != 0 else np.inf

#     # Direction perpendicular to the velocity vector (rotate velocity vector by 90 degrees)
#     if omega > 0:
#         dir_x, dir_y = -vy / np.sqrt(vx**2 + vy**2), vx / np.sqrt(vx**2 + vy**2)
#     elif omega < 0:
#         dir_x, dir_y = vy / np.sqrt(vx**2 + vy**2), -vx / np.sqrt(vx**2 + vy**2)
#     else:
#         dir_x, dir_y = 0, 0

#     # Calculate ICR position
#     icr_x = x + dir_x * R
#     icr_y = y + dir_y * R

#     # Calculate rotation angle
#     theta = omega * T

#     # Calculate the new position
#     new_x, new_y = rotate_point_around_another_point([x, y], [icr_x, icr_y], theta)

#     return new_x, new_y

# def rotate_vector(vector, angle):
#     """
#     Rotate a 2D vector by a given angle.

#     Parameters:
#     vector: A tuple or list representing the vector (vx, vy).
#     angle: The rotation angle in radians.
    
#     Returns:
#     The rotated vector (vx_new, vy_new).
#     """
#     rotation_matrix = np.array([
#         [np.cos(angle), -np.sin(angle)],
#         [np.sin(angle),  np.cos(angle)]
#     ])

#     return np.dot(rotation_matrix, vector)

# def calculate_new_velocity(vx, vy, omega, theta1, theta2):
#     """
#     Calculate the new velocity of the object after time T.

#     Parameters:
#     vx, vy: Initial velocity components.
#     omega: Angular velocity.
#     T: Time duration.
    
#     Returns:
#     New velocity components (vx_new, vy_new).
#     """
#     # Angular displacement
#     angular_displacement = theta2 - theta1

#     # Correct for wrapping
#     if angular_displacement > np.pi:
#         angular_displacement -= 2 * np.pi
#     elif angular_displacement < -np.pi:
#         angular_displacement += 2 * np.pi

#     # Time duration for the change in orientation
#     T = angular_displacement / omega if omega != 0 else 0

#     # Angular displacement
#     theta = omega * T

#     # Rotate the velocity vector
#     vx_new, vy_new = rotate_vector([vx, vy], theta)

#     return vx_new, vy_new


# # Example usage
# x, y = 0, 0                # Initial position
# vx, vy = 1, 1              # Initial velocity
# omega = np.pi / 4          # Angular velocity (radians per second)
# T = 2                      # Time duration (seconds)
# theta1, theta2 = 0, omega*T

# new_x, new_y = find_new_position(x, y, vx, vy, omega, theta1, theta2)
# print(f"New Position: ({new_x}, {new_y})")

# vx_new, vy_new = calculate_new_velocity(vx, vy, omega, theta1, theta2)
# print(f"New Velocity: ({vx_new}, {vy_new})")
