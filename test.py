# import pybullet as p
# import pybullet_data
# import time
# import math 

# # Initialize the PyBullet physics simulation
# p.connect(p.GUI)
# p.setAdditionalSearchPath(pybullet_data.getDataPath())

# # Set the gravity
# p.setGravity(0, 0, -9.81)  # Earth's gravity (9.81 m/s^2 in the downward direction)

# # Create a box
# box_start_pos = [0, 0, 0.5]  # Initial position of the box (x, y, z)
# box_half_extents = [0.5, 0.5, 0.5]  # Half-extents of the box (x, y, z)
# objectId = p.createCollisionShape(p.GEOM_BOX, halfExtents=box_half_extents)
# box_id = p.createMultiBody( 1, 
#                             objectId, 
#                             -1, 
#                             box_start_pos)
# # box_id = p.createBox(
# #     halfExtents=box_half_extents,
# #     basePosition=box_start_pos,
# #     baseMass=1.0,
# #     collisionShapeType=p.GEOM_BOX
# # )

# # Set the initial velocity of the box (upward)
# initial_velocity = [-1, 0, 0.0]  # 2.0 m/s upward velocity
# p.resetBaseVelocity(box_id, linearVelocity=initial_velocity)
# # p.resetBasePositionAndOrientation(box_id, [0, 0, 0], p.getQuaternionFromEuler([0, -2, 0]))

# # Simulation loop
# for _ in range(10000):
#     p.applyExternalTorque(box_id, -1, 
#                         [0, -4, 0], # gravity compensated 
#                         # [0, 0, 0], 
#                         p.LINK_FRAME)
#     pos_object, ori = p.getBasePositionAndOrientation(box_id)

#     euler = p.getEulerFromQuaternion(ori)
#     print("euler", euler)
#     if euler[0] > -0.8 and euler[0] < 0.8:
#         y = euler[1]
#     elif (euler[0] > 3 or euler[0] < -3) and euler[1] > 0:
#         y = math.pi - euler[1]
#     elif (euler[0] > 3 or euler[0] < -3) and euler[1] < 0:
#         y = -math.pi - euler[1]
#     print("y", y)
#     ori_new = p.getQuaternionFromEuler([0, y, 0])
#     # p.resetBasePositionAndOrientation(box_id, pos_object, ori_new)

#     print('!!!!', p.getEulerFromQuaternion(ori_new))
#     print(box_id)
#     p.stepSimulation()
#     time.sleep(20/240)

# # Close the PyBullet simulation
# p.disconnect()


####################################
# import pybullet as p
# import time
# import pybullet_data
# physicsClient = p.connect(p.GUI)#or p.DIRECT for non-graphical version
# p.setAdditionalSearchPath(pybullet_data.getDataPath()) #optionally
# p.setGravity(0,0,-10)
# planeId = p.loadURDF("plane.urdf", basePosition=[0,0,-1], baseOrientation=[0,0,0,1])
# startPos = [0,0,1]
# startOrientation = p.getQuaternionFromEuler([0,0,0])
# boxId = p.loadURDF("asset/4face-bottle.urdf", startPos, startOrientation)
# #set the center of mass frame (loadURDF sets base link frame)
# # startPos/Ornp.resetBasePositionAndOrientation(boxId, startPos,
# # startOrientation)
# # for i in range (10000):
# #     p.stepSimulation()
# #     time.sleep(1./240.)
# objectId = p.createCollisionShape(p.GEOM_BOX, halfExtents=[.2, .6, .1])
# objectUid = p.createMultiBody(1, 
#                             objectId, 
#                             -1, 
#                             [0,0,4],)
#                             # self.quat_object
# force_on_object = [0,0,1]
# torque_on_object = [0,0,1]
# pos_object,quat_object = p.getBasePositionAndOrientation(objectUid)
# for i in range(int(2400)):
#     # Apply external force on object
#     p.applyExternalForce(objectUid, -1, 
#                         force_on_object, # gravity compensated 
#                         pos_object,
#                         p.WORLD_FRAME)
#     # p.applyExternalTorque(objectUid, -1, 
#     #                     torque_on_object,
#     #                     p.WORLD_FRAME)
#     p.stepSimulation()
#     pos_object,quat_object = p.getBasePositionAndOrientation(objectUid)
#     eul_object = p.getEulerFromQuaternion(quat_object) # rad
#     print(pos_object)
#     time.sleep(2./240.)
# p.disconnect()


####################### VHACD

# import pybullet as p
# import pybullet_data as pd
# import os
# p.connect(p.DIRECT)
# name_in = os.path.join(pd.getDataPath(), "/home/yif/Documents/KTH/research/dynamicCaging/cad/bottle/5face-bottle.obj")
# name_out = "5face-bottle-vhacd.obj"
# name_log = "log.txt"
# p.vhacd(name_in, name_out, name_log)


####################### forward sim of calculated escape path
# # Test
# from pomp.example_problems.waterswing import *

# data = [4.316823965701437,5.460139303451004,2.625445829083096,-3.5258993444553637,-2.09344701820186,-2.772054131286835,4.4528401414474805,5.136296693792287,2.628733887768435,-2.375735744303537,-1.5948528847833574,-2.7829957016139133]
# gipper_vel = data[-3:]
# # mass_object = .1
# # mass_gripper = 10
# # moment_gripper = 1 # moment of inertia
# # half_extents_gripper = [.7, .4] # movement on x-z plane
# # radius_object = 0.01
# # params = [mass_object, mass_gripper, moment_gripper, half_extents_gripper, radius_object]
# dynamics_sim = forwardSimulationWaterSwing(gui=1)
# cage = WaterSwing(data, dynamics_sim)
# cage.controlSpace()

# # From high to low
# # data = [1.02, 5.11, 0.00, 0,
# #             1.01, 4.70, -0.00, 0.00, 1, -0.50]
# # gipper_vel = data[-3:]
# time.sleep(2.5)

# # energy labeler
# states = [[4.316823965701437, 5.460139303451004, 2.625445829083096, -3.5258993444553637, -2.09344701820186, -2.772054131286835, 4.4528401414474805, 5.136296693792287, 2.628733887768435], [4.074336878909817, 5.276046363658792, 2.4161538200515467, -2.971237516012434, -2.7776848310963054, -2.807118110698281, 4.2746599606247075, 5.01668272743353, 2.420009210147392], [3.858229280388568, 5.020864236632051, 2.1823395140018533, -2.2513397374267976, -3.319590913428838, -2.804553466694555, 4.076681981932738, 4.883778320368243, 2.1880929016795654], [3.7428299520017334, 4.823638169911736, 2.025141760285246, -1.6822590647180071, -3.178115413647162, -1.0235026326020933, 3.9380959699652394, 4.7907390782126935, 2.0257354051816114], [3.7359667745574847, 4.81044557132814, 2.0216520933914053, -1.6471625866197281, -3.166223660063036, -0.8375349156775846, 3.9281969323236487, 4.784093222329525, 2.0141379415732845], [3.639619466338663, 4.581744915687082, 1.7528055757328824, -0.5554072282194291, -2.1423094362691275, -2.6097829313003142, 3.700446649288678, 4.630816425796308, 1.7473307756185996], [3.6246279607190455, 4.465571469528229, 1.5651169607688404, 0.055537487727060776, -1.389772991341567, -2.826741218700687, 3.542070323742182, 4.524440428317468, 1.561809231144706], [3.625299751214212, 4.454308728377588, 1.5437080522347357, 0.08923252381532681, -1.3402816068148522, -2.5050095147075866, 3.522272997516747, 4.5111481635157435, 1.5386153145899926], [3.650186151064806, 4.403562431863464, 1.2765965614541743, 0.35987430865070924, 0.22461953838160587, -2.792188352144134, 3.2946812144082678, 4.358086891381648, 1.272113288859611], [3.664766624894947, 4.453257615046084, 1.1031435341656008, 0.08187120607156174, 1.3034199844805563, -2.8044193840720792, 3.1462928881621575, 4.258268397748272, 1.0984751036235516], [3.6234522094846238, 4.616416407669038, 0.9287162391749618, -0.8110626949675207, 2.1328823797248577, -0.5389134450955012, 2.938817003608109, 4.1183116953603465, 0.8564302878702269], [3.5671613457411073, 4.781343460660784, 0.9856744653281005, -0.4176694551169884, 1.7305872306202437, 1.1936372460188076, 2.740936059199363, 3.985327945742922, 0.6248793503529699], [3.5564997022948863, 4.9017834656924695, 1.1019905001806802, 0.16963079826616873, 0.8224284725651493, 1.2321532215343438, 2.5132613837036075, 3.832487877617853, 0.35817559561496987], [3.554425263773559, 4.938373502043444, 1.214432264898984, -0.1981729240794338, 0.012705196721721185, 1.2216012788071497, 2.2954856071424503, 3.686293029846048, 0.10306765630036126], [3.5651319116803517, 4.918396185806572, 1.3184911366949514, 0.4137567944022273, -0.44741889673330565, 1.159828767541879, 2.087608729515891, 3.5467434024275066, -0.14044446759085613], [3.5689453165842657, 4.8579551278458935, 1.4072374729900674, -0.28085939726806725, -1.047908383996324, 1.0860661802950846, 1.8995296497585281, 3.420484215715493, -0.3607649606352908], [3.5512857069706927, 4.792298333505185, 1.4709348366712522, -0.3216960300020228, -1.1928301527725356, 1.097058281542125, 1.7609450646741553, 3.327451130769799, -0.5231063765627689], [3.5614931747780467, 4.674808317535185, 1.5707963267948966, 0.506747877285763, -1.3628597590164102, 1.1209269860998086, 1.5431692881129981, 3.181256282997994, -0.7782143158773773], [3.641836420459721, 4.533730659787069, 1.673236472263389, 1.2140457610522875, -1.6998791643370235, 1.1144262224687493, 1.325393511551841, 3.0350614352261887, -1.0333222551919856], [3.77314515568658, 4.380702510112895, 1.7677891547199556, 1.7612398949021248, -1.7934512980392379, 1.0498528695353324, 1.1175166339252818, 2.8955118078076474, -1.2768343790832033], [3.903749383448919, 4.2505804949893085, 1.840389464602938, 1.9172328337493767, -1.8757414717052496, 1.0028057128481482, 0.9492353520371148, 2.7825430618021616, -1.4739632412808574], [4.022027867728643, 4.151311809480473, 1.893219501517981, 2.4119198892339315, -1.7957193845555914, 0.9517677975030854, 0.8205496658873401, 2.6961551972097313, -1.6247088417849425], [4.15530791575957, 4.0437999476703625, 1.9449303104317535, 2.5022417417169907, -2.1469329324418567, 0.9571410506124228, 0.6918639797375654, 2.609767332617301, -1.7754544422890295], [4.353082209912056, 3.8542902140042163, 2.01865583095987, 2.494565492114522, -2.615993968789843, 0.9079855471236102, 0.5037848999802024, 2.4835081459052875, -1.9957749353334644], [4.56523270414475, 3.570575059901374, 2.105123880330936, 2.149841821621216, -3.5324956793381337, 0.9755203134137329, 0.28600912341904516, 2.3373132981334823, -2.250882874648072], [4.714602822306294, 3.332030912639993, 2.171003921911309, 2.3205899643072527, -3.618456205611239, 0.9993891327866564, 0.12762674046547592, 2.2309897724812604, -2.4364159214223324], [4.892748369816132, 3.0223970917071292, 2.2512627989874847, 2.186962172359565, -4.174601117338609, 1.0267628303202405, -0.06045233929188741, 2.104730585769247, -2.6567364144667667], [5.1087412423821545, 2.6128346697589837, 2.3494579960901527, 2.5108857918321767, -4.735797350912984, 1.1118119640241602, -0.2782281158530451, 1.9585357379974402, -2.9118443537813756], [5.33714242074836, 2.157478751803284, 2.454914563312725, 2.4740853907523057, -5.179091141285346, 1.185700044449023, -0.4960038924142023, 1.8123408902256302, 3.116233014083602], [5.500187064658994, 1.7992382579415382, 2.535364968524239, 2.4205969538717635, -5.5452394079034, 1.2253349314583153, -0.6543862753677712, 1.7060173645734047, 2.9306999673093412], [5.718169261877119, 1.2873731382542748, 2.644344750146106, 2.5554325266938633, -6.126839513264472, 1.2637998431513544, -0.8622631529943303, 1.5664677371548588, 2.687187843418124], [5.916526609208855, 0.8603661026965977, 2.7352780904858087, 3.0180336828961902, -5.940774714191859, 1.3015114373686567, -1.0305444348824973, 1.4534989911493692, 2.4900589812204714], [6.048232123359708, 0.5772045532413462, 2.7952350686194456, 2.7531924969539974, -6.375816383050173, 1.3136862608715971, -1.1394323231630759, 1.3804015672634642, 2.3625050115631674], [6.238466854203405, 0.17400453159884546, 2.8753685820704824, 3.2979984904761745, -6.517161314106122, 1.2545299252684539, -1.2879158071820467, 1.2807232619645028, 2.188567780212298], [6.481960289008563, -0.333505967162194, 2.983309477335939, 2.581660827972802, -5.703760687489648, 1.332169578443737, -1.4858937858740078, 1.147818854899221, 1.9566514717444723], [6.661961324906895, -0.7666240299841764, 3.086138534677246, 1.9965301163844438, -5.2614488889868944, 1.2689447555920155, -1.6739728656313708, 1.0215596681872032, 1.7363309787000372], [6.785733907557016, -1.0975460203535865, -3.111264048922966, 1.7331110544877313, -4.701224826030202, 1.3024432931893828, -1.8323552485849397, 0.9152361425349792, 1.5507979319257768], [6.886396752825513, -1.3887879552426292, -3.028987559903126, 1.5034131853781627, -4.623686323894854, 1.32865678905448, -1.9808387326039105, 0.8155578372360195, 1.3768607005749078], [7.007270877129058, -1.8451206988870474, -2.903904417042411, 1.0393537328075915, -4.88827574265141, 1.2837274672476935, -2.208513408099666, 0.6627177691109479, 1.110156945836907], [7.054902096265934, -2.11271008942854, -2.8343158739288286, 0.7421957422863608, -4.984542753435685, 1.2855550776819518, -2.3371990942494407, 0.5763299045185162, 0.9594113453328196], [7.097692396616485, -2.51643853454152, -2.7197673176371917, 0.2588831510243903, -4.277218117523473, 1.3305547939248437, -2.545075971876, 0.4367802770999726, 0.715899221441602], [7.121924302696215, -2.8470329455905414, -2.617758466932949, 0.380542176360827, -4.524874173980589, 1.3865693074375864, -2.723256152698765, 0.3171663107412209, 0.5071745438205584], [7.1357829214207245, -3.2516950775996167, -2.501103805697139, -0.02753163633766367, -5.1554863837488085, 1.4118771691368794, -2.921234131390726, 0.1842619036759413, 0.2752582353527324], [7.14148235282963, -3.6491198871203236, -2.3832838815279382, 0.15518229365191535, -4.419507965652958, 1.4156141613150244, -3.119212110082687, 0.05135749661066154, 0.043341926884906366], [7.144588141294252, -3.7631024237809276, -2.348165633897338, 0.10212385639411778, -4.659153966975008, 1.3969554365875776, -3.1786055036902754, 0.011486174491077611, -0.026232965655441448], [7.134623403623189, -4.131483497965606, -2.2284618578533393, -0.31025232772693545, -3.8018107395066045, 1.341759262244, -3.3864823813168345, -0.1280634529274662, -0.26974508954665877], [7.110904298673581, -4.37828650555215, -2.133726872700182, -0.3567296184545028, -3.202026211635341, 1.3335913709784148, -3.5547636632050015, -0.24103219893295388, -0.466873951744311], [7.1030374966377545, -4.560040031068747, -2.060561728029607, 0.03604931744698461, -3.486955550595908, 1.3654409278667832, -3.683449349354776, -0.32742006352538566, -0.6176195522483979]]
# inputs = [[0.07799672098869126, 7.395491045905715, -9.123170838592646, -1.4025591764578553], [0.08620774836846803, 8.638773343027687, -6.5028729879903535, 0.0923271841341613], [0.059498544658712495, 8.58154770573918, -2.6412098232614785, -1.9466492009704612], [0.0066983593238409845, 6.8252501886517365, -4.4672836410869765, -1.5987047984619709], [0.09865259648569563, 9.680194467324725, -2.633023272532114, 0.39546123757356844], [0.06977829866243111, 9.845840898264722, 6.841193337301078, 1.945713134167936], [0.01155166970547829, 5.823491515717912, -0.8854770311835569, 2.1371703688031385], [0.09921915353887528, 6.868889135366068, 6.9822377045678365, -0.5076890620766084], [0.06320593657909097, 5.337544373572792, 3.657021672096972, 1.7823321013688682], [0.08818018294051871, 7.909519433339092, -8.055384909026639, 1.7515724488777025], [0.08638943843596965, 8.421819651717705, -7.866968433659354, 2.822706747985791], [0.09720816758385749, 6.128350470085117, -9.476439214487947, 1.205717494399396], [0.09378717630057203, -4.012404243770209, -8.833344827382847, -0.34533630743549626], [0.09098093443556281, 6.993482496933268, -5.25856106805745, -2.1179146719521045], [0.08064250672059685, -8.77409926320372, -7.585130365427604, -2.795213832510137], [0.06191732482054499, -0.7000565611535272, -2.484373179020764, 0.5653080641335806], [0.09306573552564139, 9.037569897684936, -1.8548684317513668, 0.7811576037060632], [0.09253015139068275, 7.7159769138166325, -3.676575330770304, -0.21275226428923233], [0.09055044922237233, 6.253647243998163, -1.0693958137396038, -2.2139435291457854], [0.07288665855243527, 2.202253254314126, -1.1617436282260378, -1.992585459692469], [0.05592303962331079, 9.132684101253293, 1.4773308396859974, -2.826715311418865], [0.05631371422196357, 1.6674803535334064, -6.483942422515674, 0.29759555682488203], [0.080892186948786, -0.09696315287331458, -5.924981511764078, -1.8627348690497383], [0.09349594435257, -3.760621859927009, -9.99820047870861, 2.210228714949447], [0.06995808434459043, 2.5612221402905746, -1.289407894096561, 1.0740968717815935], [0.08292317314738959, -1.6879300035497202, -7.024988358661519, 1.0373190644305144], [0.09572358362560475, 3.5337122124284654, -6.122140729902235, 2.783426193946382], [0.09407171887441362, -0.4014589208713062, -4.835932258607622, 2.418155359359133], [0.07018006044832108, -0.8023265532081165, -5.492223999270804, 1.7835699154182212], [0.09139385967623503, 1.540977975109703, -6.646858346983768, 1.3187969723328399], [0.0719026682172637, 6.530839852268102, 2.626797163377999, 1.597196931556387], [0.04890361235497183, -5.778353147829631, -9.491818229635864, 0.7968975383743242], [0.06425215143915503, 8.716895896354831, -2.2615188968950894, -2.8395041089509334], [0.08550535329774486, -8.596051950040508, 9.760807519397662, 2.7950275143101555], [0.0831823205499394, -7.391124777958204, 5.587096402140046, -2.3958880238546505], [0.06794470693957634, -3.9512859284507122, 8.403360944350307, 1.5074341918814627], [0.0642523870539933, -3.6751659057530794, 1.2406160341655799, 1.2582478015245968], [0.09996478213824117, -4.842359505084232, -2.7609330652857134, -1.406483117429859], [0.05547044515070026, -5.485993671161175, -1.7772371221713108, 0.1012215009743418], [0.0897719876751807, -5.523572471565381, 8.08371012471109, 1.542847414042023], [0.07713459558757221, 1.622120337819151, -3.302080752761565, 2.2405805405096624], [0.08578994625235849, -4.896885752381888, -7.567346517218718, 0.9110830211745382], [0.08400285177507899, 2.1925671598749474, 8.831741017150236, 0.1345317184131991], [0.027506384410939517, -2.122337490311903, -9.585840052881942, -2.2390469672936053], [0.08877295861887542, -4.712870675669181, 9.798208313924679, -1.89244026320839], [0.07371615126403544, -0.6561499867421325, 8.467546275829566, -0.3459342183072085], [0.05492322769514392, 7.251303432027459, -5.260233950041244, 1.7639754584326477]]
# # states = [[4.316823965701437, 5.460139303451004, 2.625445829083096, -3.5258993444553637, -2.09344701820186, -2.772054131286835, 4.4528401414474805, 5.136296693792287, 2.628733887768435], [3.790645939774659, 5.03567541930165, 2.179020533944699, -2.809502484719083, -2.974546127989472, -2.6183507532412698, 4.056881316032324, 4.870490910418871, 2.1648920895217345], [3.378278021329076, 4.615074646656777, 1.7116855746948587, -1.9243488134976148, -1.8588832470225136, -2.7201953385356017, 3.641127560779203, 4.59139165558177, 1.677867841739299], [3.142053390479113, 4.2871424501701725, 1.3082959491721793, -1.244205792853133, -2.4958524504805912, -2.6600049568145963, 3.284767199133673, 4.352163722864255, 1.2604184864972112], [2.781469488294317, 3.9425120604040886, 0.7740641818857749, -2.778445423961699, -1.7883400297988388, -2.929603069987379, 2.879133247788139, 4.079358685520745, 0.7848272715347827], [2.285290770623816, 3.5062295348042136, 0.23543151207965748, -1.8522876703695257, -2.699339047304674, -2.735818721669528, 2.4132348584000756, 3.7672884755765113, 0.24044971420932904], [2.1034988557291925, 3.2344303437785236, -0.08900261291059901, -1.3829457057688372, -1.9869857485567148, -2.78517490707777, 2.135954444028005, 3.581213357832584, -0.08409048071288655]]
# # inputs = [[0.1674855279158624, 4.27773133343489, -5.26477320730277, 2.2227116246757133], [0.1762593068150075, 5.058020978408413, 6.375216462668337, -1.7459071764742091], [0.15114675275707065, 4.534286804296531, -4.246461356387208, 1.2038076344201967], [0.17173327657110607, -6.947529007359607, 0.7722702887455171, -1.1858727471250785], [0.19594865003607143, -4.192053508198339, -1.78910321339057, -2.748143423183466], [0.11829106008435997, 1.7109005533365895, 5.864152053184208, -1.428867797581943]]
# print(len(states), len(inputs))
# # dynamics_sim.reset_states(states[0]+gipper_vel)
# for i in range(len(inputs)):
#     dynamics_sim.reset_states(states[i]+gipper_vel)
#     new_states, viapoints = dynamics_sim.run_forward_sim(inputs[i])
#     print('new_states', new_states)

# # # ball balance
# # states = [[1.02, 5.11, 1.01, 4.7, -0.0], [4.304206592094783, 5.195005075715069, 1.0126748209851473, 4.754665910584282, -0.3832874049208745], [4.589857682473735, 1.4220963753814768, 1.0126748209851473, 5.1671659105842584, -0.58691567122751]]
# # inputs = [[0.4341884048103374, 7.5790919267402685, -8.60582670121947], [0.41600639801144806, 0.6924874918276647, -9.146445334142033]]
# # for i in range(len(inputs)):
# #     state = states[i][:2]+inputs[i][1:]+states[i][2:]+gipper_vel
# #     sim.reset_states(state)
# #     new_states = sim.run_forward_sim_ball_balance(inputs[i][0])
# #     print('new_states', new_states)

# dynamics_sim.finish_sim()

####################### IRC
import numpy as np

def rotate_point_around_another_point(point, center, angle):
    """
    Rotate a point around another point by a given angle.

    Parameters:
    point: The point to rotate (x, y).
    center: The center of rotation (x, y).
    angle: The rotation angle in radians.
    
    Returns:
    The rotated point (x, y).
    """
    # Translate point back to origin
    temp_point = [point[0] - center[0], point[1] - center[1]]

    # Rotate point
    rotated_temp_point = [temp_point[0] * np.cos(angle) - temp_point[1] * np.sin(angle),
                          temp_point[0] * np.sin(angle) + temp_point[1] * np.cos(angle)]

    # Translate point back to the original location
    rotated_point = [rotated_temp_point[0] + center[0], rotated_temp_point[1] + center[1]]
    
    return rotated_point

def find_new_position(x, y, vx, vy, omega, theta1, theta2):
    """
    Find the new position of the object after time T.

    Parameters:
    x, y: Initial position of the object.
    vx, vy: Initial velocity components.
    omega: Angular velocity.
    T: Time duration.
    
    Returns:
    New position (x, y) of the object.
    """
    # Angular displacement
    angular_displacement = theta2 - theta1

    # Correct for wrapping
    if angular_displacement > np.pi:
        angular_displacement -= 2 * np.pi
    elif angular_displacement < -np.pi:
        angular_displacement += 2 * np.pi

    # Time duration for the change in orientation
    T = angular_displacement / omega if omega != 0 else 0

    # Calculate the radius (distance to ICR)
    R = np.sqrt(vx**2 + vy**2) / np.abs(omega) if omega != 0 else np.inf

    # Direction perpendicular to the velocity vector (rotate velocity vector by 90 degrees)
    if omega > 0:
        dir_x, dir_y = -vy / np.sqrt(vx**2 + vy**2), vx / np.sqrt(vx**2 + vy**2)
    elif omega < 0:
        dir_x, dir_y = vy / np.sqrt(vx**2 + vy**2), -vx / np.sqrt(vx**2 + vy**2)
    else:
        dir_x, dir_y = 0, 0

    # Calculate ICR position
    icr_x = x + dir_x * R
    icr_y = y + dir_y * R

    # Calculate rotation angle
    theta = omega * T

    # Calculate the new position
    new_x, new_y = rotate_point_around_another_point([x, y], [icr_x, icr_y], theta)

    return new_x, new_y

def rotate_vector(vector, angle):
    """
    Rotate a 2D vector by a given angle.

    Parameters:
    vector: A tuple or list representing the vector (vx, vy).
    angle: The rotation angle in radians.
    
    Returns:
    The rotated vector (vx_new, vy_new).
    """
    rotation_matrix = np.array([
        [np.cos(angle), -np.sin(angle)],
        [np.sin(angle),  np.cos(angle)]
    ])

    return np.dot(rotation_matrix, vector)

def calculate_new_velocity(vx, vy, omega, theta1, theta2):
    """
    Calculate the new velocity of the object after time T.

    Parameters:
    vx, vy: Initial velocity components.
    omega: Angular velocity.
    T: Time duration.
    
    Returns:
    New velocity components (vx_new, vy_new).
    """
    # Angular displacement
    angular_displacement = theta2 - theta1

    # Correct for wrapping
    if angular_displacement > np.pi:
        angular_displacement -= 2 * np.pi
    elif angular_displacement < -np.pi:
        angular_displacement += 2 * np.pi

    # Time duration for the change in orientation
    T = angular_displacement / omega if omega != 0 else 0

    # Angular displacement
    theta = omega * T

    # Rotate the velocity vector
    vx_new, vy_new = rotate_vector([vx, vy], theta)

    return vx_new, vy_new


# Example usage
x, y = 0, 0                # Initial position
vx, vy = 1, 1              # Initial velocity
omega = np.pi / 4          # Angular velocity (radians per second)
T = 2                      # Time duration (seconds)
theta1, theta2 = 0, omega*T

new_x, new_y = find_new_position(x, y, vx, vy, omega, theta1, theta2)
print(f"New Position: ({new_x}, {new_y})")

vx_new, vy_new = calculate_new_velocity(vx, vy, omega, theta1, theta2)
print(f"New Velocity: ({vx_new}, {vy_new})")
